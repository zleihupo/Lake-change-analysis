# -*- coding: utf-8 -*-
"""Lake.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ydusM1iAW7RyITfgu-i0pLnd2VbCsd7t
"""

# ‚úÖ Install required libraries (execute once if running first time)
!pip install earthengine-api geemap geedim rasterio pillow -q

# ‚úÖ Install dependencies (needed for Colab)
!pip install geemap earthengine-api -q

# ‚úÖ Import libraries
import ee, geemap
import datetime

# ‚úÖ Initialize Earth Engine (Colab first run will ask for authorization)
ee.Authenticate()
ee.Initialize(project='lake-465014')  # Replace with your project ID (if needed)

# ‚úÖ Set lake region and date
lake_name = "Lake Name"
# Refined Rectangle (actual lake boundary)
region = ee.Geometry.Rectangle([-60.17,-3.66,-60.00,-3.56])

year, month, day = 2018, 6, 11
start_date = datetime.date(year, month, day)
end_date = start_date + datetime.timedelta(days=1)

start = start_date.strftime("%Y-%m-%d")
end = end_date.strftime("%Y-%m-%d")
print(f"\nüìÖ Processing: {start}")

# ‚úÖ Band processing function (avoid empty images)
def get_median_image(collection, bands, scale_factor):
    if collection.size().getInfo() == 0:
        return None
    return collection.median() \
        .select(bands) \
        .divide(scale_factor) \
        .multiply(255) \
        .clamp(0, 255) \
        .uint8()

# ‚úÖ Get three data sources
s2_col = ee.ImageCollection("COPERNICUS/S2_SR_HARMONIZED") \
    .filterBounds(region).filterDate(start, end) \
    .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))

landsat_col = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") \
    .filterBounds(region).filterDate(start, end) \
    .filter(ee.Filter.lt('CLOUD_COVER', 20))

modis_col = ee.ImageCollection("MODIS/006/MOD09GA") \
    .filterBounds(region).filterDate(start, end)

# ‚úÖ Composite images
s2_img = get_median_image(s2_col, ['B4', 'B3', 'B2'], 3000)
landsat_img = get_median_image(landsat_col, ['SR_B4', 'SR_B3', 'SR_B2'], 10000)
modis_img = get_median_image(modis_col, ['sur_refl_b01', 'sur_refl_b04', 'sur_refl_b03'], 5000)

if not any([s2_img, landsat_img, modis_img]):
    print("‚ö†Ô∏è No available images, skipped")
else:
    # ‚úÖ Merge images by priority
    fused = s2_img or landsat_img or modis_img
    if fused and landsat_img: fused = fused.unmask(landsat_img)
    if fused and modis_img: fused = fused.unmask(modis_img)

    # ‚úÖ Set band visualization depending on image type
    if s2_img:
        vis_params = {'bands': ['B4', 'B3', 'B2'], 'min': 0, 'max': 255}
    elif landsat_img:
        vis_params = {'bands': ['SR_B4', 'SR_B3', 'SR_B2'], 'min': 0, 'max': 255}
    elif modis_img:
        vis_params = {'bands': ['sur_refl_b01', 'sur_refl_b04', 'sur_refl_b03'], 'min': 0, 'max': 255}
    else:
        vis_params = None

    # ‚úÖ Display map
    fused = fused.clip(region)
    Map = geemap.Map()
    Map.centerObject(region, zoom=8)
    if vis_params:
        Map.addLayer(fused, vis_params, f"{lake_name} {start}")
    Map.addLayer(region, {'color': 'red'}, 'Lake Region')
    Map.add_layer_control()
    Map
